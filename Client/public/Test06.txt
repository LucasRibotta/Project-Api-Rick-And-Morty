/* 6️⃣ ***COMPONENTE CREATEBAND*** 6️⃣

Implementar el componente CreateBand. Este consistirá en un formulario controlado con estados de react.
📢¡Sigue las instrucciones de los tests!📢

REQUISITOS
🟢 Aquí tendrás que renderizar una serie de elementos HTML con distintos atibutos e información dentro.

🟢 Debes manejar cada uno de los inputs de tu formulario mediante un estado local llamado "input".

🟢 La información del formulario se debe despachar al estado global cuando se hace un submit.

🟢 Debes manejar los errores que pueden tener los inputs del formulario.

IMPORTANTE
❗Importar las actions como Object Modules, ¡sino los test no funcionarán!
❗Este componente debe ser funcional.
❗¡Puedes implementar el manejo de errores como mejor prefieras! Sólo recuerda renderizar el error apropiado en cada caso.
❗NO hacer un destructuring de los hooks, debes utilizarlos con la siguiente forma:
      - 'React.useState'
      - 'React.useEffect'
*/

import React from "react";
import { useDispatch } from "react-redux";
import * as actions from "./../../redux/actions/index";

const CreateBand = () => {
  const dispatch = useDispatch();

  const [error, setError] = React.useState({
    name: false,
    origin: false,
    tickets: false,
  });

  const [state, setState] = React.useState({
    name: "",
    origin: "",
    description: "",
    tickets: 0,
  });

  const handelName = ({ target }) => {
    if (target.value.length > 30) {
      setError((prev) => ({ ...prev, name: true }));
    } else {
      setError((prev) => ({ ...prev, name: false }));
    }
    setState({ ...state, name: target.value });
  };

  const handelOrigin = ({ target }) => {
    if (target.value.length > 30) {
      setError((prev) => ({ ...prev, origin: true }));
    } else {
      setError((prev) => ({ ...prev, origin: false }));
    }
    setState({ ...state, origin: target.value });
  };

  const handelDescription = ({ target }) => {
    setState({ ...state, description: target.value });
  };

  const handelTickets = ({ target }) => {
    if (target.value < 0) {
      setError((prev) => ({ ...prev, tickets: true }));
    } else {
      setError((prev) => ({ ...prev, tickets: false }));
    }
    setState({ ...state, tickets: target.value });
  };

  const handelSubmit = (event) => {
    event.preventDefault();

    if (!error.name && !error.origin && !error.tickets) {
      dispatch(actions.createBands(state));
    }
  };

  return (
    <form onSubmit={handelSubmit}>
      <label>Name: </label>
      <input type="text" name="name" onChange={handelName} />
      {error.name ? <p>Nombre u Origen demasiado largo</p> : ""}
      <label>Origin: </label>
      <input type="text" name="origin" onChange={handelOrigin} />
      {error.origin ? <p>Nombre u Origen demasiado largo</p> : ""}
      <label>Description: </label>
      <textarea name="description" onChange={handelDescription}></textarea>
      <label>Tickets: </label>
      <input type="number" name="tickets" onChange={handelTickets} />
      {error.tickets ? <p>Los tickets deben ser un numero positivo</p> : ""}
      <button type="submit">Create Band</button>
    </form>
  );
};

export default CreateBand;
